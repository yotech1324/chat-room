<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat-Room</title>
    <!-- <link rel="stylesheet" href="/server/views/stylesheets/index.css"> -->

</head>

<body>
    <div class="container">
        <sidebar>
            <span class="logo">CHAT-Room</span>
            <div class="list-wrap">
                <div class="list">
                    <img src="" alt="" />
                    <div class="info">
                        <span class="user">Yogesh Sahu</span>
                        <span class="text">it's me</span>
                    </div>
                    <span class="count">20</span>
                    <span class="time">now</span>
                </div>
                <div class="list">
                    <img src="" alt="" />
                    <div class="info">
                        <span class="user">Ankit</span>
                        <span class="text">it's me</span>
                    </div>
                    <span class="count">20</span>
                    <span class="time">now</span>
                </div>
                <div class="list">
                    <img src="" alt="" />
                    <div class="info">
                        <span class="user">Nikhil</span>
                        <span class="text">it's me</span>
                    </div>
                    <span class="count">20</span>
                    <span class="time">now</span>
                </div>
                <div class="list">
                    <img src="" alt="" />
                    <div class="info">
                        <span class="user">Anshdeep</span>
                        <span class="text">it's me</span>
                    </div>
                    <span class="count">20</span>
                    <span class="time">now</span>
                </div>
            </div>
        </sidebar>

        <div class="content">
            <header>
                <img src="" alt="">
                <div class="info">
                    <span class="user"></span>
                    <span class="time"></span>
                </div>
                <div class="open">
                    <a href="javascript:;">UP</a>
                </div>
            </header>
            <div class="message-wrap" id="all-messages">
                <!-- <div class="message-list msg" id="all-messages">
                </div>
                <div class="message-list me " id="">
                </div>
             -->
            </div>


            <div class="message-footer">
                <!-- /  <input type="text" id="roomName" placeholder="Room name"> -->
                <!--     <button id="joinBtn" style="background: rgb(155, 156, 163);">Join</button> -->

                <input type="text" id="message" data-placeholder="Send a message to {0}" />
                <button id="sendBtn" type="submit" style="background: rgb(155, 156, 163);">Send</button>

                <!-- <input type="text" id="roomId" placeholder="type room id here"> -->
            </div>
        </div>
    </div>

    <!-- old code -->


    <!--  
    <div>

       <input type="text" id="roomName" placeholder="Room name">
       <button id="joinBtn">Join</button>
    </div>
    <br>   
       <input type="text" id="message" placeholder="type message here">
       <input type="text" id="roomId" placeholder="type room id here">
       <button id="sendBtn">send</button>

    <div id="all-messages" style="border: 2px solid red; margin: bottum 4px;"></div> -->

</body>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.12.0/qs.min.js"
    integrity="sha512-7guIquo9is/MQs1wfLZyVViTlsvrIoHdnSzoFmPvPMDpqjL2fvDqcVKpaZ9PS3Sbf6DLBRUUZ5X3jcQ/wotWow=="
    crossorigin="anonymous" referrerpolicy="no-referrer">
    </script>
<script src="/socket.io/socket.io.js"></script>
<script>

    const currentTime = new Date();
    // Get the current hour, minute, and second
    let hours = currentTime.getHours();
    let minutes = currentTime.getMinutes();

    let Minutes = minutes < 10 ? '0' + minutes : minutes;

    const seconds = currentTime.getSeconds();
    // Determine AM or PM
    const meridiem = hours >= 12 ? 'PM' : 'AM';

    // Convert hours to 12-hour format
    hours = hours % 12 || 12; // 0 should be converted to 12 for 12-hour format

    // Format the time as a string
    const formattedTime = `${hours}:${Minutes} ${meridiem}`;


    const socket = io();
    const sendBtn = document.getElementById("sendBtn");
    const messageInput = document.getElementById("message");
    // const roomIdInput = document.getElementById("roomId");
    //  const roomNameInput = document.getElementById("roomName")
    const allMessages = document.getElementById("all-messages");
    //  const myMessages = document.getElementById("my-messages");

    // getting username and roomname from  url
    const urlParams = new URLSearchParams(window.location.search);

    const userName = urlParams.get('userName'); 
    const roomName = urlParams.get('roomName');   
let userList = 0;
 
    //websocket handling
    socket.on("connect", (e) => {
        console.log("my id -", socket.id); 
    })

    socket.on("receive-message", (messageData) => {

        console.log(messageData)
        const p = Object.assign(document.createElement("div"), { className: "message-list msg" });
        p.innerHTML = `<p class="senderName">${messageData.data.userName} <span>${messageData.time}</span></p>
        <p>${messageData.data.message}</p>`;
        allMessages.appendChild(p);
        allMessages.scrollTop = allMessages.scrollHeight
    });


    sendBtn.addEventListener("click", async (e) => {

        const message = messageInput.value;
      /*  await  axios.get('/user/allusers', { roomName, userName }).then(function (response) {
            console.log(response.data);
            userList = response.data;
            console.log(userList)
            // Display the response data
          })
        .catch(function (error) {
            console.error('Error making POST request:', error);
        }) */
        console.log(message, roomName, userName);
     // save messagge api calling by axios http request.
    await axios.post('/msg/message', { message, roomName, userName })
     .catch(function (error) {
         console.error('Error making POST request:', error);
        });
        
     
        socket.emit("message", { message, roomName, userName });
        
        const m = Object.assign(document.createElement("div"), { className: "message-list me msg" });
        m.innerHTML = `<p class="senderName">${userName} <span>${formattedTime}</span></p>
        <p>${message}</p>`;
        allMessages.appendChild(m);
        allMessages.scrollTop = allMessages.scrollHeight
        //  e.target.messageInput.value = '';
        // e.target.element.messageInput.focus() = '';
        
        
    })
    
    document.addEventListener('keypress', function (event) {
        // Check if the key pressed is Enter (key code 13)
        if (event.key === 'Enter' || event.keyCode === 13) {
            // Your code to execute when Enter is pressed
            
            const message = messageInput.value;
            console.log(message);
            
            // save messagge api calling by axios http request.
            axios.post('/msg/message', { message, roomName, userName })
            .catch(function (error) {
                console.error('Error making POST request:', error);
            });

            socket.emit("message", { userName, roomName, message });

            const m = Object.assign(document.createElement("div"), { className: "message-list me msg" });
            m.innerHTML = `<p class="senderName">${userName}<span>${formattedTime}</span></p>
        <p>${message}</p>`;
            allMessages.appendChild(m);
            allMessages.scrollTop = allMessages.scrollHeight
            //  e.target.messageInput.value = '';
            // e.target.element.messageInput.focus() = '';
        }
    });



    document.addEventListener('DOMContentLoaded', function () {
        console.log(roomName);
        socket.emit("join-room", roomName);
    });


    //    joinBtn.addEventListener("click", (e) => {
    //      console.log(roomName);
    //    socket.emit("join-room", roomName);
    // })

</script>
<!-- <script>
    const ls = localStorage.getItem("selected");
let selected = false;
var list = document.querySelectorAll(".list"),
    content = document.querySelector(".content"),
    input = document.querySelector(".message-footer input"),
    open = document.querySelector(".open a");

//init
function init() {
  input.focus();
  let now = 2;
  const message = [];
  for(var i = 4; i < list.length; i++) {
    list[i].querySelector(".time").innerText = `${now} day ago`;
    list[i].querySelector(".text").innerText = message;
    now++;
  }
}
init();

//process
function process() {
  if(ls != null) {
    selected = true;
    click(list[ls], ls);
  }
  if(!selected) {
    click(list[0], 0);
  }

  list.forEach((l,i) => {
    l.addEventListener("click", function() {
      click(l, i);
    });
  });
  
  try {
    document.querySelector(".list.active").scrollIntoView(true);
  }
  catch {}
  
}
process();

//list click
function click(l, index) {
  list.forEach(x => { x.classList.remove("active"); });
  if(l) {
    l.classList.add("active");
    document.querySelector("sidebar").classList.remove("opened");
    open.innerText="UP";
    const img = l.querySelector("img").src,
          user = l.querySelector(".user").innerText,
          time = l.querySelector(".time").innerText;

    content.querySelector("img").src = img;
    content.querySelector(".info .user").innerHTML = user;
    content.querySelector(".info .time").innerHTML = time;

    const inputPH = input.getAttribute("data-placeholder");
    input.placeholder = inputPH.replace("{0}", user.split(' ')[0]);

    document.querySelector(".message-wrap").scrollTop = document.querySelector(".message-wrap").scrollHeight;
    
    localStorage.setItem("selected", index);
  }
}


</script> -->

<style>
    * {
        margin: 0;
        padding: 0;
        border: 0;
        box-sizing: border-box;
        font: 16px sans-serif;
    }

    :focus {
        outline: 0;
    }

    a {
        text-decoration: none;
    }

    body {
        background: #F4F7F9;
    }

    html,
    body {
        height: 100% !important;
    }

    .container {
        display: flex;
        height: 100% !important;
    }

    /* //sidebar */
    sidebar {
        width: 300px;
        min-width: 300px;
        display: flex;
        background: #fff;
        flex-direction: column;
        border-right: 1px solid #ccc;
        transition: 500ms all;

        .logo {
            display: flex;
            margin: 10px 0 0 0;
            padding-bottom: 27px;
            align-items: center;
            justify-content: center;
            color: #000;
            font-size: 2em;
            letter-spacing: 7px;
            border-bottom: 1px solid #ccc;
        }

        .list-wrap {
            width: 100%;
            overflow: auto;

            /* //list */
            .list {
                border-bottom: 1px solid #ccc;
                background: #fff;
                display: flex;
                align-items: center;
                padding: 5px;
                height: 70px;
                cursor: pointer;

                &:hover,
                &.active {
                    background: #F4F7F9;
                }

                img {
                    border-radius: 50%;
                    width: 50px;
                    height: 50px;
                    object-fit: cover;
                    margin-right: 10px;
                    box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.5);
                }

                /* //info */
                .info {
                    flex: 1;

                    .user {
                        font-weight: 700;
                    }

                    .text {
                        display: flex;
                        margin-top: 3px;
                        font-size: 0.85em;
                    }
                }

                .time {
                    margin-right: 5px;
                    margin-left: 5px;
                    font-size: 0.75em;
                    color: #a9a9a9;
                }

                .count {
                    font-size: 0.75em;
                    background: #bde2f7;
                    box-shadow: 0 5px 15px -5px rgba(0, 0, 0, .7);
                    padding: 3px;
                    width: 20px;
                    height: 20px;
                    border-radius: 50%;
                    text-align: center;
                    color: #000;
                }
            }
        }
    }

    /* //content */
    .content {
        flex: 1;
        display: flex;
        flex-direction: column;

        /* //header */
        header {
            height: 76px;
            background: #fff;
            border-bottom: 1px solid #ccc;
            display: flex;
            padding: 10px;
            align-items: center;

            img {
                border-radius: 50%;
                width: 50px;
                height: 50px;
                object-fit: cover;
                margin-right: 10px;
                box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.5);
            }

            /* //info */
            .info {
                flex: 1;

                .user {
                    font-weight: 700;
                }

                .time {
                    display: flex;
                    margin-top: 3px;
                    font-size: 0.85em;
                }
            }

            .open {
                display: none;

                a {
                    color: #000;
                    letter-spacing: 3px;
                }
            }
        }
    }

    /* //message wrap */
    .message-wrap {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 15px;
        overflow: auto;

        &::before {
            content: '';
            margin-bottom: auto;
        }

        /* //msg list */
        .message-list {
            align-self: flex-start;
            max-width: 70%;

        }

        .msg {
            background: #fff;
            box-shadow: 0 5px 15px -5px rgba(0, 0, 0, .1);
            padding: 10px 5px;
            margin-bottom: 10px;
            border-radius: 5px;
        }

        .me {
            align-self: flex-end;

            background: #bde2f7;
            color: #111;
        }


        .time {
            text-align: right;
            color: #999;
            font-size: 0.75em;
        }
    }

    .senderName {
        text-align: left;
        color: #999;
        margin-top: -2px;
        /*  // font-size: 0.75em; */
        margin-bottom: 4px;
    }

    /* //msg footer */
    .message-footer {
        border-top: 1px solid #ddd;
        background: #eee;
        padding: 10px;
        display: flex;
        flex-direction: column;

        #sendBtn {
            width: 100px;
            height: 40px;
            margin-left: 15px;
        }

        input {
            flex: 1;
            margin-left: 15px;
            padding: 0 20px;
            border-radius: 5px;
        }

    }

    @media only screen and(max-width: 480px),
    only screen and(max-width: 767px) {
        sidebar {
            position: absolute;
            width: 100%;
            min-width: 100%;
            height: 0vh;
            bottom: 0;
            box-shadow: 0 5px 25px -5px rgba(0, 0, 0, 1);

            &.opened {
                height: 70vh !important;
            }

            .logo {
                display: none;
            }

            /* //list wrap */
            .list-wrap {
                .list {
                    .count {
                        font-size: 0.75em;
                    }
                }
            }
        }

        header {
            .open {
                display: block !important;
            }
        }
    }
</style>

</html>